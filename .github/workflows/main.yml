on:
  push:
  pull_request:
  workflow_dispatch:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2

      - uses: alire-project/setup-alire@v1

      - run: cd tests; bash -x build_all.sh

      # Produce an Alire release manifest
      - name: Make Release Manifest
        run: |
          # Set user GitHub login required for `alr publish`
          alr config --set --global user.github_login ${{github.repository_owner}}

          # Run Alire publish assistant
          alr publish --skip-build ${{github.server_url}}/${{github.repository}} ${{github.sha}}

      # Save the path to the release manifest for the next step. This is a
      # little trick to get around the fact that the
      # actions/upload-release-asset doesn't allow globing pattern.
      - name: Get Release Manifest PATH
        run: |
          export MANIFEST_PATHNAME=$(ls alire/releases/*.toml | head -n 1)
          echo MANIFEST_PATHNAME=$MANIFEST_PATHNAME >> $GITHUB_ENV
          echo MANIFEST_NAME=$(basename $MANIFEST_PATHNAME) >> $GITHUB_ENV

      # If this worklow was triggered by a release event, upload the release
      # manifest as a GitHub release asset.
      - name: Upload release manifest
        if: (github.event_name == 'release')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.MANIFEST_PATHNAME }}
          asset_name: ${{ env.MANIFEST_NAME }}
          asset_content_type: application/toml
