with "config/cortex_m_config.gpr";
project Cortex_M is

   for Library_Name use "Cortex_M";
   for Library_Version use Project'Library_Name & ".so." & Cortex_M_Config.Crate_Version;

   Core_Src_Dirs := ();
   case Cortex_M_Config.core is
     when "m0" | "m0p" =>
        Core_Src_Dirs := Core_Src_Dirs & ("src/cm0",
                                          "src/nocache",
                                          "src/nvic_cm0");
     when "m4" =>
        Core_Src_Dirs := Core_Src_Dirs & ("src/cm4",
                                          "src/nocache",
                                          "src/nvic_cm4_cm7");
     when "m4f" =>
        Core_Src_Dirs := Core_Src_Dirs & ("src/cm4f",
                                          "src/fpu",
                                          "src/nocache",
                                          "src/nvic_cm4_cm7");
     when "m7f" | "m7df" =>
        Core_Src_Dirs := Core_Src_Dirs & ("src/cm7",
                                          "src/fpu",
                                          "src/cache",
                                          "src/nvic_cm4_cm7");
   end case;

   Light_Runtime := "light-cortex-" & Cortex_M_Config.core;

   for Source_Dirs use ("src/", "config/") & Core_Src_Dirs;
   for Object_Dir use "obj/" & Cortex_M_Config.Build_Profile;
   for Create_Missing_Dirs use "True";
   for Library_Dir use "lib";

   type Library_Type_Type is ("relocatable", "static", "static-pic");
   Library_Type : Library_Type_Type :=
     external ("CORTEX_M_LIBRARY_TYPE", external ("LIBRARY_TYPE", "static"));
   for Library_Kind use Library_Type;

   package Compiler is
      for Default_Switches ("Ada") use Cortex_M_Config.Ada_Compiler_Switches;
   end Compiler;

   package Binder is
      for Switches ("Ada") use ("-Es"); --  Symbolic traceback
   end Binder;

   package Install is
      for Artifacts (".") use ("share");
   end Install;

end Cortex_M;
